# engine structure

this doc lists all files, classes and functions of the llamas engine, with brief explanations

(current implementation is different, this is the goal after refactoring)

```
engine
│   world.js
│   ground.js
│
└───/llamas
       llamas.js
	   endocrineSystem.js
	   homeostaticSystem.js
	   nervousSystem.js
	   reproductiveSystem.js

```
---
## world.js

### ❀ function createWorld (size, energy, ground, llamas)

initializes ground and llamas

input parameters:

- *size*	<= array in the format [numberOfLines, numberOfColumns]
	- numberOfLines 	<= vertical size of the world
	- numberOfColumns	<= horizontal size of the world
- *energy*	<= array in the format [minEnergy, maxEnergy]
- *ground*	<= array with predetermined ground. If passed, ignores *size*
- *llamas*	<= array with predetermined llamas. If passed, position llamas on the ground (either generated by *size* or passed in *ground*).

it **calls** createGround (if no *ground* passed), createLlamas (if no *llamas* passed) and placeLlamasRandomly (if *llamas* passed)

it **returns** an array [ground, llamas]

```
flow:
		createWorld
   		 🡧       🡦
createGround	createLLamas || placeLLamasRandomly
		 🡦       🡧
		return world
```

### ❀ function simulateWorld (steps)

runs simulation for a number of steps

input parameters:

- *steps*	<= the number of steps of the simulation

it **calls**  simulateLLamas and simulateGround in sucession at each step

it **returns** an array [ground, llamas]  with the end state of the world

```
flow:
	simulateWorld
		  🡣
	simulateLlamas
		  🡣
	simulateGround
		  🡣
 returns updated world

```
---
## ground.js

### ❀ function createGround (size, energy)

generates random ground with specified size and energy range

input parameters:

- *size*	<= array in the format [numberOfLines, numberOfColumns]
	- numberOfLines 	<= vertical size of the world
	- numberOfColumns	<= horizontal size of the world
- *energy*	<= array in the format [minEnergy, maxEnergy]

it **returns** a 2D array. Each position contains an energy value

```
flow:
	createGround
		🡣
   returns ground

```

### ❀ function simulateGround (ground, llamaActions)

runs one step of the simulation for the ground, based on llama activity

input parameters:

- *ground*			<= 2D array of ground energy for each position
- *llamaActions*	<= array of llama actions, in the format [[llamaId, position, action], ...]

it **returns** the end state of the ground

---
# /llamas

## llamas.js

### ❀ function createLlamas (groundSize, numberOfLlamas)

generates random llamas

input parameters:

- *groundSize*		<= array in the format [numberOfLines, numberOfColumns]
- *numberOfLlamas*	<= number of llamas to be generated

it **calls** functions for generating each of the llama systems (nervous, endocrine, homeostatic, reproductive)

it **returns** an array of llamas with random parameters, including position

```
flow:
						 createLlamas
					🡧		  🡣		  🡦
	nervousCreation  homeostaticCreation  reproductiveCreation
	  		🡣				  │					│
   endocrineCreation		  │				    │
			🡦				  🡣				  🡧
					    returns llamas

```

### ❀ function simulateLlamas (ground, llamas)

runs one step of the simulation for the llamas, based on ground state

input parameters:

- *ground*	<= 2D array of ground energy for each position
- *llamas*	<= array of all alive llamas

it **returns** the end state of the llamas

```
flow:
						simulateLlamas
							  🡣
						nervousUpdate
	  		🡧			 🡧			 🡦		  		🡦
positionUpdate  endocrineUpdate  homeostaticUpdate  reproductiveUpdate
			🡦	  		 🡦 		 🡧			    🡧
					returns updated llamas
```

## endocrineSystem.js

### ❀ function endocrineCreation (brain)

creates endocrine system, based on brain structure

input parameters:

- *brain*	<= array of layers of neurons, in the format [[{bias, weights}, ...], ...]

it **returns** an array of layers of neurons, with the last layer having as many neurons as there are layers in the brain

```
flow:
  	endocrineCreation
		  🡣
returns endocrine system

```

### ❀ function endocrineSimulation (endocrineSystem, inputSignals)

simulates endocrine system, based on regulation signals

input parameters:

- *endocrineSystem*		<= array of layers of neurons
- *inputSignals*		<= array of real numbers between 0 and 1

it **returns** an array of real numbers between 0 and 1, which will affect the parameters of the layers of the brain

```
flow:
  	endocrineSimulation
		   🡣
 returns array of signals

```

## homeostaticSystem.js

###

###

## nervousSystem.js

###

###

## reproductiveSystem.js

###

###